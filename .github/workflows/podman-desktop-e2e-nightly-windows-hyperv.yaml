name: PD E2E with Podman Latest HyperV

on:
  schedule:
    - cron:  '0 2 * * *'
  workflow_dispatch:
    inputs:
      repo_branch:
        default: 'FORK=podman-desktop,BRANCH=main'
        description: 'Podman Desktop fork and branch'
        type: string
        required: true
      npm_target:
        default: 'test:e2e'
        description: 'npm target to run tests'
        type: choice
        options:
          - 'test:e2e'
          - 'test:e2e:smoke'
          - 'test:e2e:extension'
        required: true
      env_vars:
        default: 'TEST_PODMAN_MACHINE=true'
        description: 'Env. Variables passed into target machine, ie: VAR1=xxx,VAR2=true,VAR3=15,VAR4="Pass me along",RUN_KIND_TESTS=true'
        type: 'string'
        required: true
      podman_version:
        default: 'latest'
        description: 'Podman version (use "latest" to auto-fetch latest release, or specify version like "v5.6.1")'
        type: string
        required: true
      images_version:
        default: 'BUILDER="v0.0.3",PODMAN="v0.0.3",RUNNER="v0.0.3"'
        description: 'Testing images versions, no spaces'
        type: 'string'
        required: true
      podman_provider:
        default: 'hyperv'
        description: 'Podman virtualization provider'
        type: 'string'
        required: true
      mapt_params:
        description: |
          **Format:** IMAGE=xxx;VERSION_TAG=xxx;CPUS=xxx;MEMORY=xxx;EXCLUDED_REGIONS=xxx

          **Example:** 
            IMAGE=quay.io/redhat-developer/mapt;VERSION_TAG=v0.9.8;CPUS=4;MEMORY=32;EXCLUDED_REGIONS="westindia,centralindia,southindia,australiacentral,australiacentral2,australiaeast,australiasoutheast,southafricanorth,southafricawest"
        required: false
        type: string

jobs:
  windows:
    timeout-minutes: 180
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    strategy:
      fail-fast: false
      matrix:
        windows-version: ['10','11']
        windows-featurepack: ['22h2-ent', '23h2-ent']
        exclude:
        - windows-version: '10'
          windows-featurepack: '23h2-ent'
        - windows-version: '11'
          windows-featurepack: '22h2-ent'

    steps:
    - name: Get Podman version used by Desktop
      run: |
        version=$(curl https://raw.githubusercontent.com/podman-desktop/podman-desktop/main/extensions/podman/packages/extension/src/podman5.json | jq -r '.version')
        echo "Default Podman Version from Podman Desktop: ${version}"
        echo "PD_PODMAN_VERSION=${version}" >> $GITHUB_ENV

    - name: Fetch latest Podman version
      id: fetch-podman
      uses: podman-desktop/e2e/.github/actions/fetch-latest-podman-version@main
      with:
        version_input: ${{ github.event.inputs.podman_version || 'latest' }}
        file_type: 'setup.exe'

    - name: Set the default env. variables
      env:
        DEFAULT_REPO_BRANCH: 'FORK=podman-desktop,BRANCH=main'
        DEFAULT_NPM_TARGET: 'test:e2e'
        DEFAULT_PODMAN_PROVIDER: 'hyperv'
        DEFAULT_ENV_VARS: 'TEST_PODMAN_MACHINE=true'
        DEFAULT_IMAGES_VERSIONS: 'BUILDER="v0.0.3",PODMAN="v0.0.3",RUNNER="v0.0.3"'
      run: |
        echo "${{ github.event.inputs.repo_branch || env.DEFAULT_REPO_BRANCH }}" | awk -F ',' \
         '{for (i=1; i<=NF; i++) {split($i, kv, "="); print kv[1]"="kv[2]}}' >> $GITHUB_ENV
        echo "PODMAN_PROVIDER=${{ github.event.inputs.podman_provider || env.DEFAULT_PODMAN_PROVIDER }}" >> $GITHUB_ENV
        echo "NPM_TARGET=${{ github.event.inputs.npm_target || env.DEFAULT_NPM_TARGET }}" >> $GITHUB_ENV
        echo "ENV_VARS=${{ github.event.inputs.env_vars || env.DEFAULT_ENV_VARS }}" >> $GITHUB_ENV
        echo "PODMAN_URL=${{ steps.fetch-podman.outputs.download_url }}" >> $GITHUB_ENV
        echo "${{ github.event.inputs.images_version || env.DEFAULT_IMAGES_VERSIONS }}" | awk -F ',' \
         '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "PDE2E_"kv[1]"="kv[2]}}' >> $GITHUB_ENV
    
        echo "MAPT_IMAGE=${{ secrets.MAPT_IMAGE || vars.MAPT_IMAGE }}" >> $GITHUB_ENV
        echo "MAPT_VERSION_TAG=${{ secrets.MAPT_VERSION_TAG || vars.MAPT_VERSION_TAG }}" >> $GITHUB_ENV
        echo "MAPT_CPUS=${{ secrets.MAPT_CPUS || vars.MAPT_CPUS }}" >> $GITHUB_ENV
        echo "MAPT_MEMORY=${{ secrets.MAPT_MEMORY || vars.MAPT_MEMORY }}" >> $GITHUB_ENV
        echo "MAPT_EXCLUDED_REGIONS=${{ secrets.MAPT_EXCLUDED_REGIONS || vars.MAPT_EXCLUDED_REGIONS }}" >> $GITHUB_ENV

          # For mapt_params, use repo variables/secrets directly if input is empty
          if [ -n "${{ github.event.inputs.mapt_params }}" ]; then
            mapt_params="${{ github.event.inputs.mapt_params }}"
          else
            mapt_params="IMAGE=${MAPT_IMAGE};VERSION_TAG=${MAPT_VERSION_TAG};CPUS=${MAPT_CPUS};MEMORY=${MAPT_MEMORY};EXCLUDED_REGIONS=\"${MAPT_EXCLUDED_REGIONS}\""
          fi
          echo "$mapt_params" | awk -F ';' '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "MAPT_"kv[1]"="kv[2]}}' >> $GITHUB_ENV

    - name: Create instance
      uses: podman-desktop/e2e/.github/actions/create-instance@main
      with:
        mapt-image: ${{ env.MAPT_IMAGE || '' }}
        mapt-version: ${{ env.MAPT_VERSION_TAG || '' }}
        windows-version: ${{ matrix.windows-version }}
        windows-featurepack: ${{ matrix.windows-featurepack }}
        cpus: ${{ env.MAPT_CPUS || '' }}
        memory: ${{ env.MAPT_MEMORY || '' }}
        excluded-regions: ${{ env.MAPT_EXCLUDED_REGIONS || '' }}
        arm-tenant-id: ${{ secrets.ARM_TENANT_ID }}
        arm-subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        arm-client-id: ${{ secrets.ARM_CLIENT_ID }}
        arm-client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

    - name: Check instance system info
      uses: podman-desktop/e2e/.github/actions/instance-system-info@main

    - name: Emulate X session
      uses: podman-desktop/e2e/.github/actions/emulate-x-session@main

    - name: Setup dependencies and build Podman Desktop locally
      uses: podman-desktop/e2e/.github/actions/build-podman-desktop@main
      with:
        fork: ${{ env.FORK }}
        branch: ${{ env.BRANCH }}

    - name: Download Podman latest, do not initialize and start
      uses: podman-desktop/e2e/.github/actions/download-podman-nightly@main
      with:
        podman-image-tag: ${{ env.PDE2E_PODMAN }}
        podman-download-url: ${{ env.PODMAN_URL }}
        podman-provider: ${{ env.PODMAN_PROVIDER }} 

    - name: Run Podman Desktop Playwright E2E tests
      uses: podman-desktop/e2e/.github/actions/run-playwright-test@main
      with:
        pde2e-runner-tag: ${{ env.PDE2E_RUNNER }}
        fork-repo: ${{ env.FORK }}
        branch-name: ${{ env.BRANCH }}
        npm-target: ${{ env.NPM_TARGET }}
        podman-provider: ${{ env.PODMAN_PROVIDER }}
        env-vars: ${{ env.ENV_VARS }}
        ci-bot-token: ${{ secrets.PODMANDESKTOP_CI_BOT_TOKEN }}

    - name: Destroy instance
      if: always()
      uses: podman-desktop/e2e/.github/actions/destroy-instance@main
      with:
        mapt-image: ${{ env.MAPT_IMAGE || '' }}
        mapt-version: ${{ env.MAPT_VERSION_TAG || '' }}
        arm-tenant-id: ${{ secrets.ARM_TENANT_ID }}
        arm-subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        arm-client-id: ${{ secrets.ARM_CLIENT_ID }}
        arm-client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v5
      if: always() # always run even if the previous step fails
      with:
        fail_on_failure: true
        include_passed: true
        detailed_summary: true
        require_tests:  true
        report_paths: '**/*results.xml'

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: results-e2e-${{ matrix.windows-version }}${{ matrix.windows-featurepack }}
        path: |
          results/*
