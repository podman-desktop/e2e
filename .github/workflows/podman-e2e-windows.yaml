name: Podman E2E (Install & Run)

on:
  workflow_dispatch:
    inputs:
      mapt_params:
        default: 'IMAGE=quay.io/redhat-developer/mapt,VERSION_TAG=v0.9.7,CPUS=8,MEMORY=16,EXCLUDED_REGIONS="westindia,centralindia,southindia,australiacentral,australiacentral2,australiaeast,australiasoutheast,southafricanorth,southafricawest"'
        description: 'MAPT image, version tag, cpus and memory request, and excluded regions in format IMAGE=xxx,VERSION_TAG=xxx,CPUS=xxx,MEMORY=xxx,EXCLUDED_REGIONS=xxx'
        required: true
        type: string
  schedule:
    - cron:  '30 0 * * *'

jobs:
  windows:
    timeout-minutes: 180
    runs-on: ubuntu-latest
    env:
      MAPT_VERSION: ${{ vars.MAPT_VERSION_TAG }}
      MAPT_IMAGE: quay.io/redhat-developer/mapt
      PODMAN_BACKEND_VERSION: v4.7.1
      PODMAN_DESKTOP_E2E_VERSION: v1.1.0
    strategy:
      fail-fast: false
      matrix:
        windows-version: ['10','11']
        windows-featurepack: ['22h2-ent', '24h2-ent']
        exclude:
        - windows-version: '10'
          windows-featurepack: '24h2-ent'
        - windows-version: '11'
          windows-featurepack: '22h2-ent'

    steps:
    - name: Get Latest Podman Desktop testing prerelease
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        tag=$(curl --request GET \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/podman-desktop/testing-prereleases/tags?pages=1" | jq -r '.[0].name')
        echo "Tag: $tag"
        # releaes id
        id=$(curl --request GET \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/podman-desktop/testing-prereleases/releases/tags/$tag" | jq -r '.id')
        echo "Release ID: $id"
        # list assets with -x64.exe suffix
        url=$(curl --request GET \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/podman-desktop/testing-prereleases/releases/$id/assets" | jq -r '.[] | select (.name | test("-x64.exe$") and (contains("setup-x64.exe") | not))' | jq -r '.browser_download_url')
        echo "Podman Desktop testing prerelease url: ${url}"
        echo "DEFAULT_PD_URL=${url}" >> $GITHUB_ENV

    - name: Set the default env. variables
      env:
        DEFAULT_MAPT_PARAMS: "IMAGE=${{ vars.MAPT_IMAGE || 'quay.io/redhat-developer/mapt' }},VERSION_TAG=${{ vars.MAPT_VERSION_TAG || 'v0.9.7' }},CPUS=${{ vars.MAPT_CPUS || '8' }},MEMORY=${{ vars.MAPT_MEMORY || '16' }},EXCLUDED_REGIONS=\"${{ vars.MAPT_EXCLUDED_REGIONS || 'westindia,centralindia,southindia,australiacentral,australiacentral2,australiaeast,australiasoutheast,southafricanorth,southafricawest' }}\""
      run: |
        echo "${{ github.event.inputs.mapt_params || env.DEFAULT_MAPT_PARAMS }}" | awk -F ',' \
         '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "MAPT_"kv[1]"="kv[2]}}' >> $GITHUB_ENV

    - name: Create instance
      uses: podman-desktop/e2e/.github/actions/create-instance@11154f001a8679292b7711d4d7a72dc99b07731d
      with:
        mapt-image: ${{ env.MAPT_IMAGE || '' }}
        mapt-version: ${{ env.MAPT_VERSION_TAG || '' }}
        windows-version: ${{ matrix.windows-version }}
        windows-featurepack: ${{ matrix.windows-featurepack }}
        cpus: ${{ env.MAPT_CPUS || '' }}
        memory: ${{ env.MAPT_MEMORY || '' }}
        excluded-regions: ${{ env.MAPT_EXCLUDED_REGIONS || '' }}
        arm-tenant-id: ${{ secrets.ARM_TENANT_ID }}
        arm-subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        arm-client-id: ${{ secrets.ARM_CLIENT_ID }}
        arm-client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

    - name: Check instance system info
      run: |
        ssh -i id_rsa \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -o ServerAliveInterval=30 \
          -o ServerAliveCountMax=1200 \
          $(cat username)@$(cat host) "systeminfo"

    - name: Emulate X session 
      run: |
        # use fake rdp to emulate an active x session
        podman run -d --name x-session \
          -e RDP_HOST=$(cat host) \
          -e RDP_USER=$(cat username) \
          -e RDP_PASSWORD=$(cat userpassword) \
          quay.io/rhqp/frdp:v0.0.1
        # Wait until the x session has been created
        podman wait --condition running x-session
        # Check logs for the x session
        podman logs x-session
        
    - name: Run podman desktop e2e
      run: |
        # Run e2e tests
        podman run --rm -d --name pd-e2e-windows \
          -e TARGET_HOST=$(cat host) \
          -e TARGET_HOST_USERNAME=$(cat username) \
          -e TARGET_HOST_KEY_PATH=/data/id_rsa \
          -e TARGET_FOLDER=pd-e2e \
          -e TARGET_RESULTS=pd-e2e-results \
          -e OUTPUT_FOLDER=/data \
          -e DEBUG=true \
          -v $PWD:/data:z \
          quay.io/rhqp/podman-desktop-e2e:${{ env.PODMAN_DESKTOP_E2E_VERSION }}-windows-amd64  \
              pd-e2e/run.ps1 \
                  -wslInstallFix 'false' \
                  -targetFolder pd-e2e \
                  -pdUrl ${{ env.DEFAULT_PD_URL }} \
                  -junitResultsFilename podman-desktop-e2e-results.xml \
                  -resultsFolder pd-e2e-results
        # Check logs 
        podman logs -f pd-e2e-windows

    - name: Run podman functional e2e test
      timeout-minutes: 60
      run: |
        # Run e2e tests
        podman run --rm -d --name podman-e2e \
          -e TARGET_HOST=$(cat host) \
          -e TARGET_HOST_USERNAME=$(cat username) \
          -e TARGET_HOST_KEY_PATH=/data/id_rsa \
          -e TARGET_FOLDER=podman-e2e \
          -e TARGET_RESULTS=podman-e2e-results.xml \
          -e OUTPUT_FOLDER=/data \
          -e DEBUG=true \
          -v $PWD:/data:z \
          quay.io/rhqp/podman-backend-e2e:${{ env.PODMAN_BACKEND_VERSION }}-windows-amd64 \
              podman-e2e/run.ps1 \
                -targetFolder podman-e2e \
                -podmanStart "true" \
                -junitResultsFilename podman-e2e-results.xml 
        # Check logs 
        podman logs -f podman-e2e

    - name: Destroy instance
      if: always()
      uses: podman-desktop/e2e/.github/actions/destroy-instance@11154f001a8679292b7711d4d7a72dc99b07731d
      with:
        mapt-image: ${{ env.MAPT_IMAGE || '' }}
        mapt-version: ${{ env.MAPT_VERSION_TAG || '' }}
        arm-tenant-id: ${{ secrets.ARM_TENANT_ID }}
        arm-subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        arm-client-id: ${{ secrets.ARM_CLIENT_ID }}
        arm-client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v5
      if: always() # always run even if the previous step fails
      with:
        fail_on_failure: true
        include_passed: true
        detailed_summary: true
        require_tests:  true
        annotate_only: true
        report_paths: '**/*results*.xml'

    - name: Upload e2e test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: E2E-results-windows-${{ matrix.windows-version }}${{ matrix.windows-featurepack }}
        path: |
          podman-e2e-results*.xml
          podman-desktop-e2e-results*.xml
          pd-e2e-results/*
