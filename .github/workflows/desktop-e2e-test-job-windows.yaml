name: Test Workflow PD E2E with Podman
run-name: Debugging PD E2E Tests with Podman ${{ contains(inputs.podman_options, 'PROVIDER=wsl') && 'WSL' || contains(inputs.podman_options, 'PROVIDER=hyperv') && 'HyperV' || '(undefined provider)' }}

on:
  workflow_dispatch:
    inputs:
      pd_repo_options:
        default: 'REPO=podman-desktop,FORK=podman-desktop,BRANCH=main'
        description: 'Podman Desktop Extension repo, fork and branch'
        type: string
        required: true
      ext_repo_options:
        default: 'REPO=podman-desktop-redhat-account-ext,FORK=redhat-developer,BRANCH=main'
        description: 'Podman Desktop Extension repo, fork and branch'
        type: string
        required: true
      ext_tests:
        default: '0'
        description: 'Run E2E tests from extension'
        type: string
        required: true
      npm_target:
        default: 'test:e2e'
        description: 'npm target to run tests'
        type: string
        required: true
      podman_options:
        default: 'PODMAN_VERSION=latest,INIT=1,START=1,ROOTFUL=1,NETWORKING=0,PROVIDER=wsl'
        description: 'Podman configuration options with provider choice. For PODMAN_VERSION use "latest" or a version like "v5.6.2"; for PROVIDER use "wsl" or "hyperv" options.'
        type: string
        required: true
      env_vars:
        default: 'TEST_PODMAN_MACHINE=true'
        description: 'Env. Variables passed into target machine, ie: VAR1=xxx,VAR2=true,VAR3=15,VAR4="Pass me along",RUN_KIND_TESTS=true'
        type: 'string'
        required: true
      images_version:
        default: 'BUILDER="v0.0.3",PODMAN="v0.0.3",RUNNER="v0.0.3"'
        description: 'Testing images versions, no spaces'
        type: 'string'
        required: true
      mapt_params:
        description: |
          **Create instance(leave empty to use repo secrets/variables)**

          **Format:** IMAGE=xxx;VERSION_TAG=xxx;CPUS=xxx;MEMORY=xxx;EXCLUDED_REGIONS=xxx

          **Example:** 
            IMAGE=quay.io/redhat-developer/mapt;VERSION_TAG=v0.9.8;CPUS=4;MEMORY=32;EXCLUDED_REGIONS="westindia,centralindia,southindia,australiacentral,australiacentral2,australiaeast,australiasoutheast,southafricanorth,southafricawest"
        required: false
        type: string

jobs:
  windows:
    name: ${{ matrix.windows-version }} - Debug
    timeout-minutes: 180
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        windows-version: ['10']
        windows-featurepack: ['22h2-ent']

    steps:
    - name: Extract Podman version from options
      id: extract-version
      run: |
        # Extract PODMAN_VERSION from the options string
        PODMAN_OPTS="${{ github.event.inputs.podman_options }}"
        PODMAN_VERSION=$(echo "${PODMAN_OPTS}" | grep -o 'PODMAN_VERSION=[^,]*' | cut -d'=' -f2)
        echo "podman_version=${PODMAN_VERSION}" >> $GITHUB_OUTPUT
        echo "Extracted Podman version: ${PODMAN_VERSION}"

    - name: Fetch Podman version
      id: fetch-podman
      uses: podman-desktop/e2e/.github/actions/fetch-latest-podman-version@main
      with:
        version_input: ${{ steps.extract-version.outputs.podman_version }}
        file_type: 'setup.exe'

    - name: Set the environment variables
      run: |
        echo "NPM_TARGET=${{ github.event.inputs.npm_target }}" >> $GITHUB_ENV
        echo "EXT_TESTS=${{ github.event.inputs.ext_tests }}" >> $GITHUB_ENV
        # Extract podman options and set PODMAN_REMOTE_URL from fetch action
        PODMAN_OPTS="${{ github.event.inputs.podman_options }}"
        echo "${PODMAN_OPTS}" | awk -F ',' \
         '{for (i=1; i<=NF; i++) {split($i, kv, "="); if(kv[1] != "PODMAN_VERSION") print "PODMAN_"kv[1]"="kv[2]}}' >> $GITHUB_ENV
        echo "PODMAN_REMOTE_URL=${{ steps.fetch-podman.outputs.download_url }}" >> $GITHUB_ENV
        echo "${{ github.event.inputs.ext_repo_options }}" | awk -F ',' \
         '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "EXT_"kv[1]"="kv[2]}}' >> $GITHUB_ENV
        echo "${{ github.event.inputs.pd_repo_options }}" | awk -F ',' \
        '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "PD_"kv[1]"="kv[2]}}' >> $GITHUB_ENV
        echo "${{ github.event.inputs.images_version }}" | awk -F ',' \
         '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "PDE2E_"kv[1]"="kv[2]}}' >> $GITHUB_ENV
        
        # For mapt_params, use repo variables directly if input is empty
        if [ -n "${{ github.event.inputs.mapt_params }}" ]; then
          mapt_params="${{ github.event.inputs.mapt_params }}"
        else
          mapt_params="IMAGE=${{ vars.MAPT_IMAGE }};VERSION_TAG=${{ vars.MAPT_VERSION_TAG }};CPUS=${{ vars.MAPT_CPUS }};MEMORY=${{ vars.MAPT_MEMORY }};EXCLUDED_REGIONS=\"${{ vars.MAPT_EXCLUDED_REGIONS }}\""
        fi
        echo "$mapt_params" | awk -F ';' '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "MAPT_"kv[1]"="kv[2]}}' >> $GITHUB_ENV

    - name: Create instance
      uses: podman-desktop/e2e/.github/actions/create-instance@main
      with:
        mapt-image: ${{ env.MAPT_IMAGE || '' }}
        mapt-version: ${{ env.MAPT_VERSION_TAG || '' }}
        windows-version: ${{ matrix.windows-version }}
        windows-featurepack: ${{ matrix.windows-featurepack }}
        cpus: ${{ env.MAPT_CPUS || '' }}
        memory: ${{ env.MAPT_MEMORY || '' }}
        excluded-regions: ${{ env.MAPT_EXCLUDED_REGIONS || '' }}
        arm-tenant-id: ${{ secrets.ARM_TENANT_ID }}
        arm-subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        arm-client-id: ${{ secrets.ARM_CLIENT_ID }}
        arm-client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

    - name: Check instance system info
      uses: podman-desktop/e2e/.github/actions/instance-system-info@main

    - name: Emulate X session 
      uses: podman-desktop/e2e/.github/actions/emulate-x-session@main

    - name: Setup dependencies and build Podman Desktop locally
      uses: podman-desktop/e2e/.github/actions/build-podman-desktop@main
      with:
        fork: ${{ env.FORK }}
        branch: ${{ env.BRANCH }}

    - name: Download Podman nightly, do not initialize
      uses: podman-desktop/e2e/.github/actions/download-podman-nightly@main
      with:
        podman-image-tag: ${{ env.PDE2E_PODMAN }}
        podman-download-url: ${{ env.PODMAN_REMOTE_URL }}

    - name: Run Podman Desktop Playwright E2E tests
      uses: podman-desktop/e2e/.github/actions/run-playwright-test@main
      with:
        pde2e-runner-tag: ${{ env.PDE2E_RUNNER }}
        fork-repo: ${{ env.PD_FORK }}
        branch-name: ${{ env.PD_BRANCH }}
        ext-repo: ${{ env.EXT_REPO }}
        ext-fork: ${{ env.EXT_FORK }}
        ext-branch: ${{ env.EXT_BRANCH }}
        ext-tests: ${{ env.EXT_TESTS }}
        npm-target: ${{ env.NPM_TARGET }}
        podman-init: ${{ env.PODMAN_INIT }}
        podman-start: ${{ env.PODMAN_START }}
        rootful: ${{ env.PODMAN_ROOTFUL }}
        user-networking: ${{ env.PODMAN_NETWORKING }}
        podman-provider: ${{ env.PODMAN_PROVIDER }}
        env-vars: ${{ github.event.inputs.env_vars }}

    - name: Destroy instance
      if: always()
      uses: podman-desktop/e2e/.github/actions/destroy-instance@main
      with:
        mapt-image: ${{ env.MAPT_IMAGE || '' }}
        mapt-version: ${{ env.MAPT_VERSION_TAG || '' }}
        arm-tenant-id: ${{ secrets.ARM_TENANT_ID }}
        arm-subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        arm-client-id: ${{ secrets.ARM_CLIENT_ID }}
        arm-client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v5
      if: always() # always run even if the previous step fails
      with:
        fail_on_failure: true
        include_passed: true
        detailed_summary: true
        annotate_only: true
        require_tests:  true
        report_paths: '**/*results.xml'

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: win-${{ matrix.windows-version }}-debug
        path: |
          results/*
