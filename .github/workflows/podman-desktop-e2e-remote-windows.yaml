name: PD Podman-Remote E2E Nightly
run-name: PD E2E Podman Remote ${{ inputs.podman_version || '(undefined version)' }} ${{ inputs.podman_provider == 'wsl' && 'WSL' || inputs.podman_provider == 'hyperv' && 'HyperV' || '(undefined provider)' }} Production mode

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      pd_repo_options:
        default: 'REPO=podman-desktop,FORK=podman-desktop,BRANCH=main'
        description: 'Podman Desktop Extension repo, fork and branch'
        type: string
        required: true
      npm_target:
        default: 'test:e2e:remote:run'
        description: 'npm target to run tests'
        type: string
        required: true
      podman_version:
        default: 'latest'
        description: 'Podman version (use "latest" to auto-fetch latest release, or specify version like "v5.6.1")'
        type: string
        required: true
      podman_desktop_url:
        description: 'podman desktop testing-prerelease setup-exe url'
        type: string
        required: false
      podman_options:
        default: 'INIT=0,START=0,ROOTFUL=0,NETWORKING=0'
        description: 'Podman machine configuration options, no spaces'
        type: 'string'
        required: true
      podman_provider:
        type: choice
        description: 'Podman virtualization provider, default is wsl, alternative hyperv'
        options:
        - wsl
        - hyperv
        required: true
      env_vars:
        default: 'ELECTRON_ENABLE_INSPECT=true'
        description: 'Env. Variables passed into target machine, ie: VAR1=xxx,VAR2=true,VAR3=15,VAR4="Pass me along"'
        type: 'string'
        required: true
      images_version:
        default: 'BUILDER="v0.0.3",PODMAN="v0.0.3",RUNNER="v0.0.3"'
        description: 'Testing images versions, no spaces'
        type: 'string'
        required: true
      mapt_params:
        description: |
          **Create instance (leave empty to use repo secrets/variables)**

          **Format:** IMAGE=xxx;VERSION_TAG=xxx;CPUS=xxx;MEMORY=xxx;EXCLUDED_REGIONS=xxx

          **Example:**
            IMAGE=quay.io/redhat-developer/mapt;VERSION_TAG=v0.9.8;CPUS=4;MEMORY=32;EXCLUDED_REGIONS="westindia,centralindia,southindia,australiacentral,australiacentral2,australiaeast,australiasoutheast,southafricanorth,southafricawest"
        required: false
        type: string

jobs:
  windows:
    name: ${{ matrix.windows-version }} - ${{ matrix.windows-featurepack }}
    timeout-minutes: 90
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        windows-version: ['11']
        windows-featurepack: ['24h2-ent']

    steps:
    - name: Get Podman version used by Desktop
      run: |
        version=$(curl https://raw.githubusercontent.com/podman-desktop/podman-desktop/main/extensions/podman/packages/extension/src/podman5.json | jq -r '.version')
        echo "Default Podman Version from Podman Desktop: ${version}"
        echo "PD_PODMAN_VERSION=${version}" >> $GITHUB_ENV

    - name: Get Latest Podman Desktop testing prerelease
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        tag=$(curl --request GET \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/podman-desktop/testing-prereleases/tags?pages=1" | jq -r '.[0].name')
        echo "Tag: $tag"
        # releaes id
        id=$(curl --request GET \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/podman-desktop/testing-prereleases/releases/tags/$tag" | jq -r '.id')
        echo "Release ID: $id"
        # list assets with setup-x64.exe suffix
        url=$(curl --request GET \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/podman-desktop/testing-prereleases/releases/$id/assets" | jq -r '.[] | select (.name | test("setup-x64.exe$"))' | jq -r '.browser_download_url')
        echo "Podman Desktop testing prerelease url: ${url}"
        echo "DEFAULT_PD_URL=${url}" >> $GITHUB_ENV

    - name: Fetch latest Podman version
      id: fetch-podman
      uses: podman-desktop/e2e/.github/actions/fetch-latest-podman-version@main
      with:
        version_input: ${{ github.event.inputs.podman_version || 'latest' }}
        file_type: 'setup.exe'

    - name: Set the default env. variables
      env:
        DEFAULT_NPM_TARGET: 'test:e2e:remote:run'
        DEFAULT_PODMAN_PROVIDER: 'wsl'
        DEFAULT_PODMAN_OPTIONS: 'INIT=0,START=0,ROOTFUL=0,NETWORKING=0'
        DEFAULT_PD_REPO_OPTIONS: 'REPO=podman-desktop,FORK=podman-desktop,BRANCH=main'
        DEFAULT_ENV_VARS: 'ELECTRON_ENABLE_INSPECT=true'
        DEFAULT_IMAGES_VERSIONS: 'BUILDER="v0.0.3",PODMAN="v0.0.3",RUNNER="v0.0.3"'
      run: |
        echo "NPM_TARGET=${{ github.event.inputs.npm_target || env.DEFAULT_NPM_TARGET }}" >> $GITHUB_ENV
        echo "PODMAN_PROVIDER=${{ github.event.inputs.podman_provider || env.DEFAULT_PODMAN_PROVIDER }}" >> $GITHUB_ENV
        echo "PODMAN_URL=${{ steps.fetch-podman.outputs.download_url }}" >> $GITHUB_ENV
        echo "PD_URL=${{ github.event.inputs.podman_desktop_url || env.DEFAULT_PD_URL }}" >> $GITHUB_ENV
        echo "ENV_VARS=${{ github.event.inputs.env_vars || env.DEFAULT_ENV_VARS }}" >> $GITHUB_ENV
        echo "${{ github.event.inputs.podman_options || env.DEFAULT_PODMAN_OPTIONS }}" | awk -F ',' \
         '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "PODMAN_"kv[1]"="kv[2]}}' >> $GITHUB_ENV
        echo "${{ github.event.inputs.pd_repo_options || env.DEFAULT_PD_REPO_OPTIONS }}" | awk -F ',' \
        '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "PD_"kv[1]"="kv[2]}}' >> $GITHUB_ENV
        echo "${{ github.event.inputs.images_version || env.DEFAULT_IMAGES_VERSIONS }}" | awk -F ',' \
         '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "PDE2E_"kv[1]"="kv[2]}}' >> $GITHUB_ENV

        # For mapt_params, use repo variables directly if input is empty
        if [ -n "${{ github.event.inputs.mapt_params }}" ]; then
          mapt_params="${{ github.event.inputs.mapt_params }}"
        else
          mapt_params="IMAGE=${{ vars.MAPT_IMAGE }};VERSION_TAG=${{ vars.MAPT_VERSION_TAG }};CPUS=${{ vars.MAPT_CPUS }};MEMORY=${{ vars.MAPT_MEMORY }};EXCLUDED_REGIONS=\"${{ vars.MAPT_EXCLUDED_REGIONS }}\""
        fi
        echo "$mapt_params" | awk -F ';' '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "MAPT_"kv[1]"="kv[2]}}' >> $GITHUB_ENV

    - name: Create instance
      uses: podman-desktop/e2e/.github/actions/create-instance@main
      with:
        mapt-image: ${{ env.MAPT_IMAGE || '' }}
        mapt-version: ${{ env.MAPT_VERSION_TAG || '' }}
        windows-version: ${{ matrix.windows-version }}
        windows-featurepack: ${{ matrix.windows-featurepack }}
        cpus: ${{ env.MAPT_CPUS || '' }}
        memory: ${{ env.MAPT_MEMORY || '' }}
        excluded-regions: ${{ env.MAPT_EXCLUDED_REGIONS || '' }}
        arm-tenant-id: ${{ secrets.ARM_TENANT_ID }}
        arm-subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        arm-client-id: ${{ secrets.ARM_CLIENT_ID }}
        arm-client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

    - name: Check instance system info
      uses: podman-desktop/e2e/.github/actions/instance-system-info@main

    - name: Emulate X session
      uses: podman-desktop/e2e/.github/actions/emulate-x-session@main

    - name: Download Podman nightly, do not initialize
      uses: podman-desktop/e2e/.github/actions/download-podman-nightly@main
      with:
        podman-image-tag: ${{ env.PDE2E_PODMAN }}
        podman-download-url: ${{ env.PODMAN_URL }}

    - name: Run Podman Desktop Playwright E2E tests
      uses: podman-desktop/e2e/.github/actions/run-playwright-test@main
      with:
        pde2e-runner-tag: ${{ env.PDE2E_RUNNER }}
        podman-desktop-url: ${{ env.PD_URL }}
        fork-repo: ${{ env.PD_FORK }}
        branch-name: ${{ env.PD_BRANCH }}
        npm-target: ${{ env.NPM_TARGET }}
        podman-init: ${{ env.PODMAN_INIT }}
        rootful: ${{ env.PODMAN_ROOTFUL }}
        podman-start: ${{ env.PODMAN_START }}
        user-networking: ${{ env.PODMAN_NETWORKING }}
        podman-provider: ${{ env.PODMAN_PROVIDER }}
        env-vars: ${{ env.ENV_VARS }}
        script-path: 'remote_machine.ps1'
        ci-bot-token: ${{ secrets.PODMANDESKTOP_CI_BOT_TOKEN }}

    - name: Destroy instance
      if: always()
      uses: podman-desktop/e2e/.github/actions/destroy-instance@main
      with:
        mapt-image: ${{ env.MAPT_IMAGE || '' }}
        mapt-version: ${{ env.MAPT_VERSION_TAG || '' }}
        arm-tenant-id: ${{ secrets.ARM_TENANT_ID }}
        arm-subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        arm-client-id: ${{ secrets.ARM_CLIENT_ID }}
        arm-client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v4
      if: always() # always run even if the previous step fails
      with:
        fail_on_failure: true
        annotate_only: true
        include_passed: true
        detailed_summary: true
        require_tests:  true
        report_paths: '**/*results.xml'

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: win-${{ matrix.windows-version }}${{ matrix.windows-featurepack }}
        path: |
          results/*
