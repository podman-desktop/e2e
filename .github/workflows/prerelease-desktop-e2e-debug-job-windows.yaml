name: Debug E2E Testing Pre-Releases
run-name: Debugging Nightly PD E2E Tests with Podman ${{ contains(inputs.podman_options, 'PROVIDER=wsl') && 'WSL' || contains(inputs.podman_options, 'PROVIDER=hyperv') && 'HyperV' || '(undefined provider)' }}

on:
  workflow_dispatch:
    inputs:
      create_machine:
        description: 'If to create new machine - defaults to true, or to use existing(requires manual setup)'
        type: choice
        options:
          - 'true'
          - 'false'
      pd_repo_options:
        default: 'REPO=podman-desktop,FORK=podman-desktop,BRANCH=main'
        description: 'Podman Desktop Extension repo, fork and branch'
        type: string
        required: true
      ext_repo_options:
        default: 'REPO=podman-desktop-extension-ai-lab,FORK=containers,BRANCH=main,TESTS=0'
        description: 'Podman Desktop Extension repo, fork, branch and if run ext. tests'
        type: string
        required: true
      npm_target:
        default: 'test:e2e'
        description: 'npm target to run tests'
        type: string
        required: true
      podman_options:
        default: 'PODMAN_VERSION=latest,DESKTOP_URL=latest,PROVIDER=wsl,INIT=1,START=1,ROOTFUL=1,NETWORKING=0'
        description: 'Podman configuration options with provider choice. For PODMAN_VERSION use "latest" or a version like "v5.6.2";for DESKTOP_URL use "latest" or a URL for a x64.exe artifact from https://github.com/podman-desktop/testing-prereleases/tags; for PROVIDER use "wsl" or "hyperv" options.'
        type: string
        required: true
      env_vars:
        default: 'TEST_PODMAN_MACHINE=true'
        description: 'Env. Variables passed into target machine, ie: VAR1=xxx,VAR2=true,VAR3=15,VAR4="Pass me along"'
        type: 'string'
        required: true
      images_version:
        default: 'BUILDER="v0.0.3",PODMAN="v0.0.3",RUNNER="v0.0.3"'
        description: 'Testing images versions, no spaces'
        type: 'string'
        required: true
      mapt_params:
        description: |
          **Create instance (leave empty to use repo secrets/variables)**

          **Format:** IMAGE=xxx;VERSION_TAG=xxx;CPUS=xxx;MEMORY=xxx;EXCLUDED_REGIONS=xxx

          **Example:**
            IMAGE=quay.io/redhat-developer/mapt;VERSION_TAG=v0.9.8;CPUS=4;MEMORY=32;EXCLUDED_REGIONS="westindia,centralindia,southindia,australiacentral,australiacentral2,australiaeast,australiasoutheast,southafricanorth,southafricawest"
        required: false
        type: string
jobs:
  windows:
    name: ${{ matrix.windows-version }} - Debug
    timeout-minutes: 180
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        windows-version: ['11']
        windows-featurepack: ['24h2-ent']

    steps:
    - name: Extract Podman version from options
      id: extract-version
      run: |
        # Extract PODMAN_VERSION from the options string
        PODMAN_OPTS="${{ github.event.inputs.podman_options }}"
        PODMAN_VERSION=$(echo "${PODMAN_OPTS}" | grep -o 'PODMAN_VERSION=[^,]*' | cut -d'=' -f2)
        echo "podman_version=${PODMAN_VERSION}" >> $GITHUB_OUTPUT
        echo "Extracted Podman version: ${PODMAN_VERSION}"

    - name: Fetch Podman version
      id: fetch-podman
      uses: podman-desktop/e2e/.github/actions/fetch-latest-podman-version@main
      with:
        version_input: ${{ steps.extract-version.outputs.podman_version }}
        file_type: 'setup.exe'

    - name: Extract Podman Desktop version from options and set it
      id: extract-podman-desktop-url
      run: |
        # Extract DESKTOP_URL from the options string
        PODMAN_OPTS="${{ github.event.inputs.podman_options }}"
        DESKTOP_URL=$(echo "${PODMAN_OPTS}" | grep -o 'DESKTOP_URL=[^,]*' | cut -d'=' -f2)

        if [ "${DESKTOP_URL}" = "latest" ]; then
          # Fetch latest Podman Desktop x64.exe artifact url from testing-prereleases repository
          DESKTOP_URL=$(curl -s https://api.github.com/repos/podman-desktop/testing-prereleases/releases | jq -r '.[0].assets[] | select(.name? | endswith("-x64.exe")) | select(.name | contains("setup") | not) | .browser_download_url')
          echo "Latest Podman Desktop version from testing-prereleases repository: ${DESKTOP_URL}"
        fi

        echo "podman_desktop_url=${DESKTOP_URL}" >> $GITHUB_OUTPUT
        echo "Extracted Podman Desktop URL: ${DESKTOP_URL}"

        # Validate the URL
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -I "$DESKTOP_URL")
        if [ "$HTTP_CODE" != "200" ] && [ "$HTTP_CODE" != "302" ]; then
          echo "Error: Download file not found (HTTP $HTTP_CODE)"
          echo "URL: $DESKTOP_URL"
          echo "This may indicate the version doesn't exist or the file type isn't available for this version"
          exit 1
        fi

    - name: Set the env. variables
      run: |
        echo "CREATE_MACHINE=${{ github.event.inputs.create_machine }}" >> $GITHUB_ENV
        echo "NPM_TARGET=${{ github.event.inputs.npm_target }}" >> $GITHUB_ENV
        echo "ENV_VARS=${{ github.event.inputs.env_vars }}" >> $GITHUB_ENV
        # Extract podman options and set PODMAN_REMOTE_URL from fetch action
        PODMAN_OPTS="${{ github.event.inputs.podman_options }}"
        echo "${PODMAN_OPTS}" | awk -F ',' \
         '{for (i=1; i<=NF; i++) {split($i, kv, "="); if(kv[1] != "PODMAN_VERSION" && kv[1] != "DESKTOP_URL") print "PODMAN_"kv[1]"="kv[2]}}' >> $GITHUB_ENV
        echo "PODMAN_REMOTE_URL=${{ steps.fetch-podman.outputs.download_url }}" >> $GITHUB_ENV
        echo "PODMAN_DESKTOP_URL=${{ steps.extract-podman-desktop-url.outputs.podman_desktop_url }}" >> $GITHUB_ENV
        echo "${{ github.event.inputs.ext_repo_options }}" | awk -F ',' \
         '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "EXT_"kv[1]"="kv[2]}}' >> $GITHUB_ENV
        echo "${{ github.event.inputs.pd_repo_options }}" | awk -F ',' \
        '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "PD_"kv[1]"="kv[2]}}' >> $GITHUB_ENV
        echo "${{ github.event.inputs.images_version }}" | awk -F ',' \
         '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "PDE2E_"kv[1]"="kv[2]}}' >> $GITHUB_ENV

        # For mapt_params, use repo variables directly if input is empty
        if [ -n "${{ github.event.inputs.mapt_params }}" ]; then
          mapt_params="${{ github.event.inputs.mapt_params }}"
        else
          mapt_params="IMAGE=${{ vars.MAPT_IMAGE }};VERSION_TAG=${{ vars.MAPT_VERSION_TAG }};CPUS=${{ vars.MAPT_CPUS }};MEMORY=${{ vars.MAPT_MEMORY }};EXCLUDED_REGIONS=\"${{ vars.MAPT_EXCLUDED_REGIONS }}\""
        fi
        echo "$mapt_params" | awk -F ';' '{for (i=1; i<=NF; i++) {split($i, kv, "="); print "MAPT_"kv[1]"="kv[2]}}' >> $GITHUB_ENV

    - name: Create instance
      if: ${{ env.CREATE_MACHINE == 'true' }}
      uses: podman-desktop/e2e/.github/actions/create-instance@main
      with:
        mapt-image: ${{ env.MAPT_IMAGE || '' }}
        mapt-version: ${{ env.MAPT_VERSION_TAG || '' }}
        windows-version: ${{ matrix.windows-version }}
        windows-featurepack: ${{ matrix.windows-featurepack }}
        cpus: ${{ env.MAPT_CPUS || '' }}
        memory: ${{ env.MAPT_MEMORY || '' }}
        arm-tenant-id: ${{ secrets.ARM_TENANT_ID }}
        arm-subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        arm-client-id: ${{ secrets.ARM_CLIENT_ID }}
        arm-client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

    - name: Setup Connection to Existing instance
      if: ${{ env.CREATE_MACHINE == 'false' }}
      run: |
        # we need to create a content for host, id_rsa, username, userpassword files from repository tmp secrets.
        # should be secrets.REMOTE_HOST, secrets.REMOTE_USER, secrets.REMOTE_RSA, secrets.REMOTE_PASS
        cat << EOF > ./host
        ${{ secrets.REMOTE_HOST }}
        EOF
        cat << EOF > ./username
        ${{ secrets.REMOTE_USER }}
        EOF
        cat << EOF > ./id_rsa
        ${{ secrets.REMOTE_RSA }}
        EOF
        chmod 600 ./id_rsa
        cat << EOF > ./userpassword
        ${{ secrets.REMOTE_PASS }}
        EOF

    - name: Check instance system info
      uses: podman-desktop/e2e/.github/actions/instance-system-info@main

    - name: Emulate X session
      uses: podman-desktop/e2e/.github/actions/emulate-x-session@main

    - name: Download Podman nightly, do not initialize
      uses: podman-desktop/e2e/.github/actions/download-podman-nightly@main
      with:
        podman-image-tag: ${{ env.PDE2E_PODMAN }}
        podman-download-url: ${{ env.PODMAN_REMOTE_URL }}

    - name: Run Podman Desktop Playwright E2E tests
      uses: podman-desktop/e2e/.github/actions/run-playwright-test@main
      with:
        pde2e-runner-tag: ${{ env.PDE2E_RUNNER }}
        podman-desktop-url: ${{ env.PODMAN_DESKTOP_URL }}
        fork-repo: ${{ env.PD_FORK }}
        branch-name: ${{ env.PD_BRANCH }}
        ext-repo: ${{ env.EXT_REPO }}
        ext-fork: ${{ env.EXT_FORK }}
        ext-branch: ${{ env.EXT_BRANCH }}
        ext-tests: ${{ env.EXT_TESTS }}
        npm-target: ${{ env.NPM_TARGET }}
        podman-init: ${{ env.PODMAN_INIT }}
        rootful: ${{ env.PODMAN_ROOTFUL }}
        podman-start: ${{ env.PODMAN_START }}
        user-networking: ${{ env.PODMAN_NETWORKING }}
        podman-provider: ${{ env.PODMAN_PROVIDER }}
        env-vars: ${{ env.ENV_VARS }}
        ci-bot-token: ${{ secrets.PODMANDESKTOP_CI_BOT_TOKEN }}

    - name: Destroy instance
      if: ${{ env.CREATE_MACHINE }}
      uses: podman-desktop/e2e/.github/actions/destroy-instance@main
      with:
        mapt-image: ${{ env.MAPT_IMAGE || '' }}
        mapt-version: ${{ env.MAPT_VERSION_TAG || '' }}
        arm-tenant-id: ${{ secrets.ARM_TENANT_ID }}
        arm-subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        arm-client-id: ${{ secrets.ARM_CLIENT_ID }}
        arm-client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v5
      if: always() # always run even if the previous step fails
      with:
        fail_on_failure: true
        include_passed: true
        detailed_summary: true
        require_tests:  true
        report_paths: '**/*results.xml'

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: win-${{ matrix.windows-version }}${{ matrix.windows-featurepack }}
        path: |
          results/*
