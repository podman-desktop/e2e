# Copyright (C) 2025 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name: 'Create MAPT Instance'
description: 'Creates a Windows instance using MAPT on Azure'
inputs:
  mapt-image:
    description: 'The MAPT container image to use for provisioning'
    required: false
    default: 'quay.io/redhat-developer/mapt'
    type: string
    example: 'quay.io/redhat-developer/mapt'
  mapt-version:
    description: 'The version tag of the MAPT container image'
    required: false
    default: 'v0.9.7'
    type: string
    example: 'v0.9.7'
  windows-version:
    description: 'The target Windows version to create'
    required: true
    type: string
    example: '10'
  windows-featurepack:
    description: 'The Windows feature pack to install'
    required: true
    type: string
    example: '23h2-ent'
  cpus:
    description: 'Number of virtual CPUs for the instance'
    required: false
    default: '4'
    type: string
    example: '4'
  memory:
    description: 'Memory in gigabytes (GB) for the instance'
    required: false
    default: '32'
    type: string
    example: '32'
  excluded-regions:
    description: 'List of Azure regions to exclude for spot instances'
    required: false
    default: 'westindia,centralindia,southindia,australiacentral,australiacentral2,australiaeast,australiasoutheast,southafricanorth,southafricawest'
    type: string
    example: 'westindia,centralindia'
  project-name:
    description: 'The project name for grouping and identifying the instance'
    required: false
    default: 'windows-desktop'
    type: string
    example: 'windows-desktop'
  tags:
    description: 'Tags to be used for the instance in key=value,key2=value2 format'
    required: false
    type: string
    example: 'project=podman-desktop'
  backed-url:
    description: 'The backed URL for instance creation'
    required: false
    default: 'file:///workspace'
    type: string
    example: 'file:///workspace'
  arm-tenant-id:
    description: 'The Azure ARM Tenant ID for authentication'
    required: true
    type: string
    example: 'your-tenant-id'
  arm-subscription-id:
    description: 'Azure ARM Subscription ID'
    required: true
    type: string
  arm-client-id:
    description: 'The Azure ARM Client ID (Service Principal)'
    required: true
    type: string
  arm-client-secret:
    description: 'The Azure ARM Client Secret (Service Principal)'
    required: true
    type: string

runs:
  using: 'composite'
  steps:
    - name: Set the default env. variables
      shell: bash
      env:
        DEFAULT_TAGS: 'project=podman-desktop,workflow=${{ github.workflow }},run=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }},source=github,org=${{ github.repository_owner }}'
      run: |
        echo "TAGS=${{ inputs.tags || env.DEFAULT_TAGS }}" >> $GITHUB_ENV

    - name: Create instance
      shell: bash
      run: |
        # Create instance using resources approach and capture container ID
        CONTAINER_ID=$(podman run -d --name windows-create --rm \
          -v ${PWD}:/workspace:z \
          -e ARM_TENANT_ID=${{ inputs.arm-tenant-id }} \
          -e ARM_SUBSCRIPTION_ID=${{ inputs.arm-subscription-id }} \
          -e ARM_CLIENT_ID=${{ inputs.arm-client-id }} \
          -e ARM_CLIENT_SECRET='${{ inputs.arm-client-secret }}' \
          --user 0 \
          ${{ inputs.mapt-image }}:${{ inputs.mapt-version }} azure \
          windows create \
          --project-name '${{ inputs.project-name }}' \
          --backed-url '${{ inputs.backed-url }}' \
          --conn-details-output '/workspace' \
          --windows-version '${{ inputs.windows-version }}' \
          --windows-featurepack '${{ inputs.windows-featurepack }}' \
          --cpus ${{ inputs.cpus }} \
          --memory ${{ inputs.memory }} \
          --nested-virt \
          --tags ${{ env.TAGS }} \
          --spot-excluded-regions ${{ inputs.excluded-regions }} \
          --spot)
        
        echo "Started container with ID: $CONTAINER_ID"

        # Wait for container to complete and capture exit code
        echo "Waiting for instance creation to complete..."
        podman wait $CONTAINER_ID
        exit_code=$?

        # Show logs regardless of success or failure
        echo "Container logs:"
        podman logs $CONTAINER_ID 2>/dev/null || echo "Container logs not available (container may have been removed)"

        # Check if container completed successfully
        if [ $exit_code -ne 0 ]; then
          echo "Instance creation failed with exit code: $exit_code"
          exit $exit_code
        fi

        # Verify connection files were created
        if [ ! -f "host" ] || [ ! -f "username" ] || [ ! -f "id_rsa" ]; then
          echo "Error: Connection files not created. Instance creation may have failed."
          ls -la
          exit 1
        fi

        echo "Instance creation completed successfully!"
        echo "Host: $(cat host)"
        echo "Username: $(cat username)"
